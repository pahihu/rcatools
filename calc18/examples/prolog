..
..  PROLOG
..
DMA=#00
INT=#01
SP=#02
PC=#03
SCALL=#04
SRET=#05
ARGPTR=#06
AC=#07
RETVAL=#07
AUX=#08
SUB=#09
MA=#0A
MQ=#0A
TMP=#0B
ZENT=#0D
IP=#0E
FP=#0F
SSEG=#7FFF
INIT1=#83F3
INIT2=#83F6
HOMDSK=#82BA   ..HOME DISKS
LOADER=#8400   ..LOADER $L
EWRITE=#8500   ..WRITE SECTOR
EREAD=#8502    ..READ SECTOR
..
 ORG#0000

 DIS,#33                   ..X=P=3
 OUT 1,#01                 ..TWO-LEVEL I/O
 LDI A.1(SSEG) ;PHI SP     ..SP=SSEG
 LDI A.0(SSEG) ;PLO SP
 SEX SP                    ..X=SP
 LDI A.1(UMULT) ;PHI SUB   ..SUB.1=UMULT.1
 LDI A.1(CALL) ;PHI SCALL  ..SCALL
 LDI A.0(CALL) ;PLO SCALL
 LDI A.1(RET) ;PHI SRET    ..SRET
 LDI A.0(RET) ;PLO SRET
 LDI A.1(RTZENT) ;PHI ZENT ..ZENT=ADDR(RTZENT)
 LDI A.0(RTZENT) ;PLO ZENT
 SEP SCALL,A(Lmain)        ..main()
 SEP SCALL,A(Lexit)        ..exit()
..
..  STD.CALL RTN
..
RCALL: SEP PC
CALL:
 SEX SP
 GHI ARGPTR ;STXD          ..PUSH ARGPTR
 GLO ARGPTR ;STXD
 GHI PC ;PHI ARGPTR        ..ARGPTR=PC
 GLO PC ;PLO ARGPTR
 LDA ARGPTR ;PHI PC        ..PC=*ARGPTR
 LDA ARGPTR ;PLO PC
 BR RCALL                  ..BRANCH TO ENTRY
..
..  STD.RET RTN
..
RRET: SEP PC
RET:
 GHI ARGPTR ;PHI PC        ..PC=ARGPTR
 GLO ARGPTR ;PLO PC
 SEX SP                    ..X=SP
 INC SP
 LDXA ;PLO ARGPTR          ..POP ARGPTR
 LDX  ;PHI ARGPTR
 GHI RETVAL
 BR RRET
NEXT:                      ..Z RTN ADR INTERPRETER
 LDA IP ;PLO PC            ..RUN!
 ..
 ..  B RUNTIME RTNS
 ..
UMULT: LBR RTUMULT
UDIV:  LBR RTUDIV
NCALL: LBR RTNCALL
SWITCH:LBR RTSWITCH
 ..
 ..  ZRTN DISPATCH TABLE
 ..
TPUSH:LBR VPUSH
TPOP: LBR VPOP
TADD: LBR VADD
TSUB: LBR VSUB
TMUL: LBR VMUL
TDIV: LBR VDIV
TMQ:  LBR VMQ
TAND: LBR VAND
TOR:  LBR VOR
TXOR: LBR VXOR
TCOM: LBR VCOM
TNEG: LBR VNEG
TSHL: LBR VSHL
TSHR: LBR VSHR
TLDI: LBR VLDI
TLDI8:LBR VLDI8
TIDX: LBR VIDX
TIDX8:LBR VIDX8
TLOD: LBR VLOD
TLOD8:LBR VLOD8
TSTO: LBR VSTO
TSTO8:LBR VSTO8
TBR:  LBR VBR
TBZ:  LBR VBZ
TBNZ: LBR VBNZ
TEQ:  LBR VEQ
TNOT: LBR BEQ
TNE:  LBR VNE
TNE0: LBR BNE
TLT:  LBR VLT
TGE:  LBR VGE
TGT:  LBR VGT
TLE:  LBR VLE
TCALL:LBR VCALL
TNCALL: LBR VNCALL
TRET: LBR VRET
TPAR8:LBR VPAR8
TPAR: LBR VPAR
TLOC8:LBR VLOC8
TLOC: LBR VLOC
TIVP: LBR VIVP
TPRI: LBR VPRI    ..PRE INC
TPRD: LBR VPRD    ..PRE DEC
TINC: LBR VINC    ..AC++
TDEC: LBR VDEC    ..AC--
TMUL2:LBR VMUL2
TDIV2:LBR VDIV2
TSWI: LBR VSWI
 ..
 ..  CALL ROUTINE IN AC
 ..
RTNCALL:
 GHI ARGPTR ;STXD        ..PUSH ARGPTR
 GLO ARGPTR ;STXD
 GHI PC ;PHI ARGPTR      ..ARGPTR=PC
 GLO PC ;PLO ARGPTR
 GLO AC ;SHL ;PLO PC     ..PC=2*AC
 GHI AC ;SHLC ;PHI PC
 LBR RRET                ..BRANCH TO ENTRY
 ..
 ..  SWITCH
 ..  AC = VAL TO JUMP ON, SWTAB ADDR ON STACK
 ..
 ..  LDI A.0(SWITCH) ;PLO SUB ;SEP SUB
 ..  DB #MAXCASE
 ..  DW ADDR(LEND)
 ..
RTSWITCH:
 LDA PC ;STR SP ;GLO AC ;SM      ..CHK MAXCASE
 LBDF RTLEND
 GLO AC ;SHL ;IRX ;ADD ;PLO MA   ..CALC OFFS, ADD TO SWTAB
 LDI #00 ;IRX ;ADC ;PHI MA
 LDA MA ;PHI PC         ..GET ADDR
 LDN MA ;PLO PC
 LBR RRET               ..JUMP TO CASE
RTLEND:
 LDA PC ;PHI AUX        ..JUMP TO LEND
 LDN PC ;PLO PC
 GHI AUX ;PHI PC
 LBR RRET
 ..
 ..  UNSIGNED MULT AC BY AUX
 ..
RTUMULT:
 IRX ;IRX                .. SP->AUX.1
 LDI #00 ;PHI MQ ;PLO MQ .. MQ=0
 GHI AC ;BZ UMULT8       .. AC.0==0? GOTO UMULT8
 LDI #10 ;PLO TMP        .. TMP.0=#10
M1:
 GLO MQ ;SHL  ;PLO MQ    .. MQ = MQ << 1
 GHI MQ ;SHLC ;PHI MQ
 GLO AC ;SHL  ;PLO AC    .. IF MSB(AC) == 0 GOTO NOADD
 GHI AC ;SHLC ;PHI AC
 BNF NOADD
 DEC SP                    .. --SP
 GLO MQ       ;ADD ;PLO MQ .. MQ += *SP
 GHI MQ ;IRX  ;ADC ;PHI MQ
NOADD:
 DEC TMP                 .. IF --TMP != 0 GOTO M1
 GLO TMP ;BNZ M1
 BR MACMQ
UMULT8:
 LDI #08 ;PLO TMP        .. TMP.0=#10
M18:
 GLO MQ ;SHL  ;PLO MQ    .. MQ = MQ << 1
 GHI MQ ;SHLC ;PHI MQ
 GLO AC ;SHL  ;PLO AC    .. IF MSB(AC.0) = 0 GOTO NOADD
 BNF NOADD8
 DEC SP                  .. --SP
 GLO MQ       ;ADD ;PLO MQ .. MQ += *SP
 GHI MQ ;IRX  ;ADC ;PHI MQ
NOADD8:
 DEC TMP                 .. IF --TMP != 0 GOTO M18
 GLO TMP ;BNZ M18
MACMQ:
 GLO MQ ;PLO AC          .. AC = MQ
 GHI MQ ;PHI AC
 LBR RRET
 ..
 ..  UNSIGNED DIVIDE AC BY AUX
 ..
 .. R - REMAINDER, Q - QUOTIENT, X - DIVIDEND, Y - DIVISOR
 .. X - AC, Y - *SP, Y0 - AUX, R - MQ
 .. USES ARGPTR
 ..
RTUDIV:

 .. r = x; q = 0 (x dividend, y divisor)
 .. X - AC, Y - *SP, Y0 - AUX, R - MQ, TMP -
SDM:
 GLO AC ;PLO MQ                 ..R=X
 GHI AC ;PHI MQ
 IRX ;LDXA ;PLO AUX             ..Y0=Y
      LDX ;PHI AUX              .. SP->Y.1
 DEC SP                         .. SP->Y.0
 GLO AC      ;SM ;PLO TMP       ..IF X>=Y
 GHI AC ;IRX ;SMB               .. SP->Y.1
 BNF COMPQ0
 PHI AC ;GLO TMP ;PLO AC        ..X=X-Y
DBLD:                           ..WHILE
 DEC SP                         .. SP->Y.0
 GLO AC      ;SM ;PLO TMP       ..X>=Y
 GHI AC ;IRX ;SMB               .. SP->Y.1
 BNF COMPQ0
 PHI AC ;GLO TMP ;PLO AC        ..X=X-Y
 DEC SP                         .. SP->Y.0
 LDX ;SHL  ;STR SP              ..Y=Y+Y
 IRX ;LDX ;SHLC ;STR SP         .. SP->Y.1
 BR DBLD
COMPQ0:
 .. Q IS AC
 LDI #00 ;PLO AC ;PHI AC        ..Q = 0
 DEC SP                         .. SP->Y.0
COMPQ:
 GLO MQ ;SM ;PLO TMP            ..IF (R >= Y)
 GHI MQ ;IRX ;SMB               .. SP->Y.1
 BNF CHK0
 PHI MQ ;GLO TMP ;PLO MQ        ..R = R - Y
 INC AC                         ..Q = Q + 1
CHK0:
 DEC SP                         .. SP->Y.0
 GLO AUX ;XOR ;IRX ;BNZ YNEY0   ..IF Y == Y0 BREAK, SP->Y.1
 GHI AUX ;XOR ;LBZ RRET
YNEY0:
 GLO AC ;SHL ;PLO AC            ..Q = Q + Q
 GHI AC ;SHLC ;PHI AC
 LDX ;SHR ;STR SP               ..Y = HALF(Y)
 DEC SP ;LDX ;SHRC ;STR SP      .. SP->Y.0
 BR COMPQ
 ..
 ..  Z RUNTIME RTNS
 ..
VNCALL:                    ..NCALL,LO(2*NARGS),HI(2*NARGS), ADR IN AC
 GLO AC ;SHL ;PLO AC       ..AC=AC << 2
 GHI AC ;SHLC ;PHI AC
 LBR DOCALL
VCALL:                     ..CALL,SUBR,LO(2*NARGS)
 ..RUNS IN PC!
 LDA IP ;PHI AC            ..AC=SUBR
 LDA IP ;PLO AC
DOCALL:                    
 LDI A.1(CHSUB1) ;PHI SUB  ..CHANGE TO SUB
 LDI A.0(CHSUB1) ;PLO SUB
 SEP SUB
CHSUB1:
 GHI ARGPTR ;STXD          ..PUSH ARGPTR
 GLO ARGPTR ;STXD
 LDI A.1(RTS) ;PHI ARGPTR  ..ARGPTR=ADDR(RTS)
 LDI A.0(RTS) ;PLO ARGPTR
 GHI AC ;PHI PC            ..PC=AC
 GLO AC ;PLO PC
 LBR RRET                  ..JUMP TO SUBR IN PC, IP POINTS TO LO(2*NARGS)...
RTS:
 LDA IP ;STR SP ;GLO SP ;ADD ;PLO AUX  ..SP += 2*#NARGS
 LBNF NOCY
 GHI SP ;ADCI #00 ;PHI SP
NOCY:
 GLO AUX ;PLO SP
 LBR NEXT
 ..
VPUSH:                     ..PUSH AC
 GHI AC ;STXD
 GLO AC ;STXD
 LBR NEXT
 ..
VPOP:                      ..POP AC
 IRX ;LDXA ;PLO AC
 LDX ;PHI AC
 LBR NEXT
 ..
VADD:                      ..AC=AC + *SP++
 GLO AC ;IRX ;ADD ;PLO AC
 GHI AC ;IRX ;ADC ;PHI AC
 LBR NEXT
 ..
VSUB:                      ..AC=*SP++ - AC
 GLO AC ;IRX ;SD  ;PLO AC
 GHI AC ;IRX ;SDB ;PHI AC
 LBR NEXT
 ..
VMUL:                      ..AC=AC * *SP++
 LDI A.0(UMULT) ;PLO SUB ;SEP SUB
 LBR NEXT
 ..
VDIV:                      ..AC=*SP++ / AC
 IRX ;LDXA ;PLO AUX        ..AUX=*SP++
 LDX ;PHI AUX
 GHI AC ;STXD              ..*SP++=AC
 GLO AC ;STXD
 GLO AUX ;PLO AC           ..AC=AUX
 GHI AUX ;PHI AC
 LDI A.0(UDIV) ;PLO SUB ;SEP SUB
 LBR NEXT
 ..
VMQ:                       ..AC=MQ
 GLO MQ ;PLO AC
 GHI MQ ;PHI AC
 LBR NEXT
 ..
VAND:                      ..AC=AC & *SP++
 GLO AC ;IRX ;AND ;PLO AC
 GHI AC ;IRX ;AND ;PHI AC
 LBR NEXT
 ..
VOR:                       ..AC=AC | *SP++
 GLO AC ;IRX ;OR ;PLO AC
 GHI AC ;IRX ;OR ;PHI AC
 LBR NEXT
 ..
VXOR:                      ..AC=AC ^ *SP++
 GLO AC ;IRX ;XOR ;PLO AC
 GHI AC ;IRX ;XOR ;PHI AC
 LBR NEXT
 ..
VCOM:                      ..AC=~AC
 GLO AC ;XRI #FF ;PLO AC
 GHI AC ;XRI #FF ;PHI AC
 LBR NEXT
 ..
VNEG:                      ..AC=-AC
 GLO AC ;SDI #00 ;PLO AC
 GHI AC ;SDBI #00 ;PHI AC
 LBR NEXT
 ..
VMUL2:
 LDI #01 ;PLO AUX
 LBR MUL2
 ..
VSHL:                      ..AC= *SP++ << AC
 GLO AC ;PLO AUX
 IRX ;LDXA ;PLO AC
 LDX ;PHI AC
NXTSHL:
 GLO AUX ;LBZ NEXT         ..0==AUX? GOTO NEXT
MUL2:
 GLO AC ;SHL ;PLO AC
 GHI AC ;SHLC ;PHI AC
 DEC AUX
 LBR NXTSHL
 ..
VDIV2:
 LDI #01 ;PLO AUX
 LBR DIV2
 ..
VSHR:                      ..AC= *SP++ >> AC
 GLO AC ;PLO AUX
 IRX ;LDXA ;PLO AC
 LDX ;PHI AC
NXTSHR:
 GLO AUX ;LBZ NEXT
DIV2:
 GHI AC ;SHR ;PHI AC
 GLO AC ;SHRC ;PLO AC
 DEC AUX
 LBR NXTSHR
 ..
VLDI8:                     ..AC=#00XX
 LDI #00 ;PHI AC
 LBR LDI8
 ..
VLDI:                      ..AC=#XXYY
 LDA IP ;PHI AC
LDI8:
 LDA IP ;PLO AC
 LBR NEXT
 ..
 ..
VIDX:                      ..AC=2*((*SP++) + AC)
 GLO AC ;IRX ;ADD ;PLO AUX
 GHI AC ;IRX ;ADC ;PHI AUX
 GLO AUX ;SHL ;PLO AC
 GHI AUX ;SHLC ;PHI AC
 LBR NEXT
 ..
VIDX8:                     ..AC=2*(*SP++)+AC
 IRX ;LDXA ;SHL ;PLO AUX
 LDX ;SHLC ;PHI AUX
 GLO AUX ;STR SP ;GLO AC ;ADD ;PLO AC
 GHI AUX ;STR SP ;GHI AC ;ADC ;PHI AC
 LBR NEXT
 ..
VLOD:                      ..MA=AC,AC=M[MA]
 GLO AC ;PLO MA
 GHI AC ;PHI MA
 LDA MA ;PLO AC
 LDN MA ;PHI AC
 LBR NEXT
 ..
VLOD8:
 GLO AC ;PLO MA            ..MA=AC
 GHI AC ;PHI MA
 LDA MA ;PLO AC            ..AC.0=M[MA]
 LDI #00 ;PHI AC
 LBR NEXT
 ..
VSTO:                      ..M[*SP]=AC
 IRX ;LDXA ;PLO MA
 LDX ;PHI MA
 GLO AC ;STR MA ;INC MA
 GHI AC ;STR MA
 LBR NEXT
 ..
VSTO8:                     ..M[*SP++]=AC.0
 IRX ;LDXA ;PLO MA
 LDX ;PHI MA
 GLO AC ;STR MA
 LBR NEXT
 ..
VBR:                       ..BR #XXYY
 LDA IP ;PHI AUX
 LDN IP ;PLO IP
 GHI AUX ;PHI IP
 LBR NEXT
 ..
VBZ:                       ..BZ #XXYY
 GLO AC ;LBNZ NOBR
 GHI AC ;LBNZ NOBR
 LBR VBR
NOBR:
 LDA IP ;LDA IP
 LBR NEXT
VBNZ:                      ..BNZ #XXYY
 GLO AC ;LBNZ VBR
 GHI AC ;LBNZ VBR
 LBR NOBR
 ..
VEQ:                       ..AC= *SP++ == AC? 1 : 0
 GLO AC ;IRX ;SD ;PLO AC
 GHI AC ;IRX ;SDB ;PHI AC
BEQ:                       ..AC= AC==0 ? 1 : 0
 GLO AC ;LBNZ F
 GHI AC ;LBZ T
 LBR F
 ..
VNE:                       ..AC= *SP++ != AC? 1 : 0
 GLO AC ;IRX ;SD ;PLO AC
 GHI AC ;IRX ;SDB ;PHI AC
 ..
BNE:                       ..AC= AC!=0 ? 1 : 0
 GLO AC ;LBNZ T
 GHI AC ;LBNZ T
 LBR F
 ..
VLT:                       ..AC= *SP++ < AC? 1 : 0
 GLO AC ;IRX ;SD
 GHI AC ;IRX ;SDB
 LBNF T
 LBR F
 ..
VGE:                       ..AC= *SP++ >= AC? 1 : 0
 GLO AC ;IRX ;SD
 GHI AC ;IRX ;SDB
 LBDF T
 LBR F
 ..
VGT:
 GLO AC ;IRX ;SD ;PLO AC
 GHI AC ;IRX ;SDB ;PHI AC
 LBNF F
 LBR BNE
 ..
VLE:
 GLO AC ;IRX ;SD ;PLO AC
 GHI AC ;IRX ;SDB ;PHI AC
 LBNF T
 LBR BEQ
T:
 LDI #01
 LSKP
F:
 LDI #00
 PLO AC ;LDI #00 ;PHI AC
 LBR NEXT
 ..
 ..
VRET:
 IRX ;LDXA ;PLO IP         ..POP IP
 LDX ;PHI IP
 GLO FP ;PLO SP            ..SP=FP
 GHI FP ;PHI SP
 IRX ;LDXA ;PLO FP         ..POP FP
 LDX ;PHI FP
 LDI A.1(CHSUB2) ;PHI SUB   ..CHANGE TO SUB
 LDI A.0(CHSUB2) ;PLO SUB
 SEP SUB
CHSUB2:
 LBR RET                   ..STD.RETURN
 ..
XZENT: SEP PC
RTZENT:                    ..ENTER Z ROUTINE
 ..SEP ZENT,LO(#FRAME),HI(#FRAME)
 ..RUNS IN ZENT
 GHI FP ;STXD              ..PUSH FP
 GLO FP ;STXD
 GLO SP ;PLO FP            ..FP=SP
 GHI SP ;PHI FP
 LDA PC ;STR SP ;GLO SP ;SM ;PLO AUX    ..SP -= #FRAME
 LDA PC ;STR SP ;GHI SP ;SMB ;PHI SP
 GLO AUX ;PLO SP
 GHI IP ;STXD              ..PUSH IP
 GLO IP ;STXD
 GHI PC ;PHI IP            ..IP=PC
 GLO PC ;PLO IP
 LDI A.1(NEXT) ;PHI PC     ..PC=ADDR(NEXT)
 LDI A.0(NEXT) ;PLO PC
 LBR XZENT
 ..
VPAR8:                     ..PAR8,#OFFS AC=ADDR(PARN)
 LDA IP ;STR SP ;GLO FP ;ADD ;PLO AC
 GHI FP ;ADCI #00 ;PHI AC
 LBR NEXT
 ..
VPAR:                      ..PAR,LO(#OFFS),HI(#OFFS)
 LDA IP ;STR SP ;GLO FP ;ADD ;PLO AC
 LDA IP ;STR SP ;GHI FP ;ADC ;PHI AC
 LBR NEXT
 ..
VLOC8:                     ..LOC8,#OFFS
 LDA IP ;STR SP ;GLO FP ;SM ;PLO AC
 GHI FP ;SMBI #00 ;PHI AC
 LBR NEXT
 ..
VLOC:                      ..LOC,LO(#OFFS),HI(#OFFS)
 LDA IP ;STR SP ;GLO FP ;SM ;PLO AC
 LDA IP ;STR SP ;GHI FP ;SMB ;PHI AC
 LBR NEXT
 ..
VPRI:                      ..PRE INC, AC=VAL, MA=ADR+1
 INC AC
STMA:
 GHI AC ;STR MA ;DEC MA
 GLO AC ;STR MA
 LBR NEXT
 ..
VPRD:                      ..PRE DEC
 DEC AC                    ..AC--
 LBR STMA
 ..
VINC:                      ..AC++
 INC AC
 LBR NEXT
 ..
VDEC:                      ..AC--
 DEC AC
 LBR NEXT
 ..
VIVP:                      ..IVP,LO(#OFFS),HI(#OFFS)
 LDA IP ;STR SP ;GLO FP ;SM ;PLO MA ..MA=FP-#OFFS
 LDA IP ;STR SP ;GLO FP ;SMB ;PHI MA
 GHI MA ;SHR ;PHI AUX      ..AUX=MA>>1
 GLO MA ;SHRC
 DEC MA ;DEC MA ;STR MA    ..*MA=AUX
 INC MA ;GHI AUX ;STR MA
 LBR NEXT
 ..
 ..  SWITCH
 ..  AC = VAL TO JUMP ON, SWTAB ADDR ON STACK
 ..
 ..  LDI A.0(SWITCH) ;PLO SUB ;SEP SUB
 ..  DB #MAXCASE
 ..  DW ADDR(LEND)
 ..
VSWI:
 LDA IP ;STR SP ;GLO AC ;SM      ..CHK MAXCASE
 LBDF VLEND
 GLO AC ;SHL ;IRX ;ADD ;PLO MA   ..CALC OFFS, ADD TO SWTAB
 LDI #00 ;IRX ;ADC ;PHI MA
 LDA MA ;PHI IP         ..GET ADDR
 LDN MA ;PLO IP
 LBR NEXT               ..JUMP TO CASE
VLEND:
 LDA IP ;PHI AUX        ..JUMP TO LEND
 LDN IP ;PLO IP
 GHI AUX ;PHI IP
 LBR NEXT
 .. 
 ..  putc(c)
 ..
 ORG*+(* AND 1)
Lputc:
 GLO SP ;ADI #03 ;PLO MA        ..MA=ADDR(c)
 GHI SP ;ADCI #00 ;PHI MA
 LDN MA ;STR SP                 ..LOAD C.0
 OUT 2  ;DEC SP                 ..EMIT
 SEP SRET
 ..
 ..  getc()
 ..
 ORG*+(* AND 1)
Lgetc:
 INP 2  ;PLO AC                 ..AC.0=KEY
 LDI #00 ;PHI AC
 SEP SRET
 ..
 ..  exit()
 ..
 ORG*+(* AND 1)
Lexit:
 IDL     ..STOP
DIE:
 LBR DIE,#DEAD
 ..
 ..  (st,c)=eread(dcb)
 ..  (st,0)=ewrite(dcb,c)
 ..
Leread:
 LDI #00 ;LSZ
Lewrite:
 LDI #01 ;PLO AC
 GHI FP ;STXD                   ..SAVE FP (RF)
 GLO FP ;STXD
 GLO SP ;ADI #05 ;PLO MA        ..MA->ARG1
 GHI SP ;ADCI #00 ;PHI MA
 LDA MA ;SHL  ;PLO RC           ..RC=*MA
 LDA MA ;SHLC ;PHI RC
 GLO AC ;LBZ MREAD              ..READ?
 LDN MA ;PHI RF                 ..RF=C
 SEP SCALL,A(EWRITE)            ..CALL EWRITE
 LDI #00 ;PLO RF                ..RF.0=0
 LBR MDONE
MREAD:
 SEP SCALL,A(EREAD)             ..CALL EREAD
MDONE:
 LDI #00 ;SHLC ;PHI AC          ..AC=(STATUS,RF.0)
 GLO RF ;PLO AC
 IRX ;LDXA ;PLO FP              ..RESTORE FP
 LDX ;PHI FP
 SEP SRET
 ..
 ..  homdsk()
 ..
Lhomdsk:
 LDI A.0(M0) ;PLO R0
 LDI A.1(M0) ;PHI R0
 SEX R0 ;SEP R0                 ..SWITCH TO R0
M0:
 LDI A.0(XHOMDSK) ;PLO PC       ..PC=SRET
 LDI A.1(XHOMDSK) ;PHI PC
 LBR HOMDSK                     ..JUMP TO HOMDSK
XHOMDSK:
 SEP SRET
 ..
 ..  PROGRAM
 ..
 .. vim: set ts=3 sw=3 et:
